<%- include("partials/header") %>
<div class="main-container">
	<div class="left-container">
		<div class="upload-img" style="position: relative">
			<div class="upload-section" id="upload-section">
				<label for="file-upload" class="upload-label">
					Upload an Image
					<input
						type="file"
						id="file-upload"
						class="upload-input"
						accept="image/*"
					/>
				</label>
			</div>
			<div
				class="preview-section"
				id="preview-section"
				style="display: none"
			>
				<img id="preview" alt="Preview" />
				<button id="remove-btn" class="remove-btn">X</button>
			</div>
			<button class="calculate-btn">Calculate</button>
		</div>
		<div class="chat">
			<textarea
				id="chat-area"
				class="chat-area"
				placeholder="Enter additional information (Optional)"
			></textarea>
		</div>
	</div>
	<div class="right-container">
		<div class="ingredients">
			<div class="ingredients-header">
				<h3>Ingredients</h3>
				<button class="add-ingredient-btn">+ Add</button>
			</div>
			<div class="ingredients-list"></div>
			<div class="total-calories"></div>
		</div>
	</div>
</div>
<script>
	const fileInput = document.getElementById("file-upload");
	const previewImage = document.getElementById("preview");
	const uploadSection = document.getElementById("upload-section");
	const previewSection = document.getElementById("preview-section");
	const removeButton = document.getElementById("remove-btn");
	const calculateButton = document.querySelector(".calculate-btn");
	const chatArea = document.getElementById("chat-area");
	const ingredientList = document.querySelector(".ingredients-list");
	const displayTotalCals = document.querySelector(".total-calories");
	const validFileTypes = [
		"image/jpeg",
		"image/png",
		"image/jpg",
		"image/gif",
		"image/webp",
	];
	let prevFoodOjbs = undefined;
	let imgData = undefined;
	let originalImage = undefined;
	let imgFileType = undefined;

	let isImageProcessed = false;

	function reset() {
		prevFoodOjbs = undefined;
		imgData = undefined;
		originalImage = undefined;
		imgFileType = undefined;
		isImageProcessed = false;
		calculateButton.innerHTML = "Calculate";
		displayTotalCals.textContent = "";
		ingredientList.innerHTML = "";
		previewImage.src = "";
		previewSection.style.display = "none";
		uploadSection.style.display = "flex";
	}
	// Reset the file input to allow re-uploading after removal
	function resetFileInput() {
		fileInput.value = ""; // Clear the file input value
	}

	fileInput.addEventListener("change", (event) => {
		const file = event.target.files[0];
		if (file) {
			console.log("File type " + file.type);
			imgFileType = file.type;

			if (!validFileTypes.includes(imgFileType)) {
				alert("Please upload a valid image file.");
				resetFileInput();
				return;
			}

			console.log("Reading Image ...");
			const reader = new FileReader();
			reader.onload = (e) => {
				if (!isImageProcessed) {
					originalImage = e.target.result;
				}
				imgData = e.target.result;
				previewImage.src = e.target.result;
				uploadSection.style.display = "none";
				previewSection.style.display = "flex";
			};
			reader.readAsDataURL(file);
		}
	});

	removeButton.addEventListener("click", () => {
		reset();
		resetFileInput(); // Reset the file input
	});

	calculateButton.addEventListener("click", async () => {
		if (!imgData) {
			alert("Please upload an image first.");
			return;
		}

		// Splits the reslut of reading the data which return the type and base64 in one string seperated by ,
		const dataList = originalImage.split(",");
		const base64 = dataList[1];
		const userContext = chatArea.value;
		chatArea.value = "";

		console.log("User context: " + userContext);
		console.log("Sending image data to server...");
		const response = await fetch("/upload", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({
				image: base64,
				type: imgFileType,
				userContext: userContext,
				prevFoodData: prevFoodOjbs,
				mock: true,
			}),
		});

		if (!response.ok) {
			throw new Error(responseData.message);
		}
		ingredientList.innerHTML = "";

		console.log("Image proccessed successfully");
		isImageProcessed = true;
		const responseData = await response.json(response);
		console.log(responseData);

		const processedBase64 = responseData.image; // Use the processed image from the server
		const processedType = responseData.type || imgFileType; // Default to original type if not provided
		const processedDataUrl = `data:${processedType};base64,${processedBase64}`;
		previewImage.src = processedDataUrl; // Update the preview with the processed image

		prevFoodOjbs = responseData.foodData;
		let totalCals = 0;
		for (const foodObj of responseData.foodData) {
			const item = document.createElement("div");
			totalCals += foodObj.estimated_cals;

			item.classList.add("ingredient-item");
			item.innerHTML = `
		<div class="ingredient-details">
			<span class="ingredient-name">${foodObj.element}</span>
		</div>
		<div class="ingredient-calories">${foodObj.estimated_cals} Calories</div>
		<div class="ingredient-actions">
			<button class="edit-btn">✏️</button>
			<button class="remove-btn">X</button>
		</div>
	`;

			document.querySelector(".ingredients-list").appendChild(item);

			// Add event listener for the remove button
			const removeBtn = item.querySelector(".remove-btn");
			removeBtn.addEventListener("click", () => {
				// Subtract the calories of the removed item
				totalCals -= foodObj.estimated_cals;
				displayTotalCals.innerHTML = `Total: ${totalCals} Calories`;

				// Remove the item from the list
				item.remove();
			});

			// Add event listener for the edit button
			const editBtn = item.querySelector(".edit-btn");
			editBtn.addEventListener("click", () => {
				const nameSpan = item.querySelector(".ingredient-name");
				const calorieDiv = item.querySelector(".ingredient-calories");

				// Store current values
				const currentName = nameSpan.textContent;
				const currentCals = parseInt(foodObj.estimated_cals);

				// Create input fields for editing
				const nameInput = document.createElement("input");
				nameInput.type = "text";
				nameInput.value = currentName;
				nameInput.classList.add("edit-input");

				const calInput = document.createElement("input");
				calInput.type = "number";
				calInput.value = currentCals;
				calInput.classList.add("edit-input");

				// Replace current content with input fields
				nameSpan.replaceWith(nameInput);
				calorieDiv.replaceWith(calInput);

				// Add Save and Cancel buttons
				const actionsDiv = item.querySelector(".ingredient-actions");
				const saveBtn = document.createElement("button");
				saveBtn.textContent = "✔️";
				saveBtn.classList.add("save-btn");
				const cancelBtn = document.createElement("button");
				cancelBtn.textContent = "❌";
				cancelBtn.classList.add("cancel-btn");

				actionsDiv.appendChild(saveBtn);
				actionsDiv.appendChild(cancelBtn);

				// Focus on the name input field
				nameInput.focus();

				// Save changes
				saveBtn.addEventListener("click", () => {
					const newName = nameInput.value.trim() || currentName;
					const newCals = parseInt(calInput.value) || currentCals;

					// Replace input fields with updated values
					const updatedNameSpan = document.createElement("span");
					updatedNameSpan.classList.add("ingredient-name");
					updatedNameSpan.textContent = newName;

					const updatedCalDiv = document.createElement("div");
					updatedCalDiv.classList.add("ingredient-calories");
					updatedCalDiv.textContent = `${newCals} Calories`;

					nameInput.replaceWith(updatedNameSpan);
					calInput.replaceWith(updatedCalDiv);

					// Remove Save and Cancel buttons
					saveBtn.remove();
					cancelBtn.remove();

					// Adjust total calories
					totalCals = totalCals - currentCals + newCals;
					displayTotalCals.innerHTML = `Total: ${totalCals} Calories`;

					// Update the object
					foodObj.element = newName;
					foodObj.estimated_cals = newCals;
				});

				// Cancel changes
				cancelBtn.addEventListener("click", () => {
					// Replace input fields with original values
					const originalNameSpan = document.createElement("span");
					originalNameSpan.classList.add("ingredient-name");
					originalNameSpan.textContent = currentName;

					const originalCalDiv = document.createElement("div");
					originalCalDiv.classList.add("ingredient-calories");
					originalCalDiv.textContent = `${currentCals} Calories`;

					nameInput.replaceWith(originalNameSpan);
					calInput.replaceWith(originalCalDiv);

					// Remove Save and Cancel buttons
					saveBtn.remove();
					cancelBtn.remove();
				});
			});

			displayTotalCals.innerHTML = `Total: ${totalCals} Calories`;
		}

		calculateButton.textContent = "Recalculate";
	});
</script>
